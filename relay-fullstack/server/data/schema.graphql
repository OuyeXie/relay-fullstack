input AddFeatureInput {
  name: String!
  description: String!
  url: String!
  clientMutationId: String
}

type AddFeaturePayload {
  featureEdge: FeatureEdge
  viewer: User
  clientMutationId: String
}

# Feature integrated in our starter kit
type Feature implements Node {
  # The ID of an object
  id: ID!

  # Name of the feature
  name: String

  # Description of the feature
  description: String

  # Url of the feature
  url: String
}

# A connection to a list of items.
type FeatureConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FeatureEdge]
}

# An edge in a connection.
type FeatureEdge {
  # The item at the end of the edge
  node: Feature

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addFeature(input: AddFeatureInput!): AddFeaturePayload
  updateParameter(input: UpdateParameterInput!): UpdateParameterPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Property
type Property implements Node {
  # The ID of an object
  id: ID!
  lastListedPrice: Float
  residualValue: Float
  lastListedTime: String
  lastUpdatedTime: String
  mortgage: Float
  taxes: Float
  strataFees: Float
  yearBuilt: Int
  levels: Int
  bedrooms: Int
  size: Float
  lotSizeSqFt: Float
  walkscore: Float
  daysOnMarket: Int
  type: String
  buildingType: String
  ownership: String
  mls: String
  address: String
  info: String
  view: String
  url: String
  source: String
  currency: String
  country: String
  liked: Boolean
  removed: Boolean
  cashFlow: Float
  discountRate: Float
  growthRate: Float
  numberOfYears: Int
  nonOperationAssets: Float

  # Present value of a property
  presentValue: Float
}

# A connection to a list of items.
type PropertyConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PropertyEdge]
}

# An edge in a connection.
type PropertyEdge {
  # The item at the end of the edge
  node: Property

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: User
  property(id: String!): Property
}

input UpdateParameterInput {
  propertyId: ID!
  discountRate: Float!
  clientMutationId: String
}

type UpdateParameterPayload {
  property: Property
  clientMutationId: String
}

# A person who uses our app
type User implements Node {
  # The ID of an object
  id: ID!

  # Features that I have
  features(after: String, first: Int, before: String, last: Int): FeatureConnection

  # Properties
  properties(after: String, first: Int, before: String, last: Int): PropertyConnection

  # Users's username
  username: String

  # User's website
  website: String
}
